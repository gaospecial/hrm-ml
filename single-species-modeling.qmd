# Single Species Modeling

Investigation of the amplification, melting curve and Ct standard curve of single species PCRs using Linear modeling.

{{< include global-settings.qmd >}}


## Data process

We use one experiment to start the story.

The experiment of melting curve analysis (and RT-PCR) was performed with a QuantStudio Software supported machine. Therefore, the results file used here is the plain text output of full results of the QuantStudio software (V1.5). In `mcmodel` package, it has the `read_quantstudio()` function to read in the data and transform the full record to a `QuantStudioRaw` class object.

```{r}
# read qPCR run results
raw_file = xfun::magic_path("cycle30-experiment1.txt")
quantstudio_raw = read_quantstudio(raw_file)
quantstudio_raw
```

The plate setting used in melting curve analysis is provided in a `csv` file. Original value for each column is the times of two-fold dilution, and we transform them into DNA quantity as related to the original concentration (assumed to be 1). Note: a label value of `16` means not contain this species.

```{r}
# read plate setting
plate_file = xfun::magic_path("modeling-plate-labels.csv")
plate = read_csv(plate_file)
plate2 = plate |> 
  drop_na() |> 
  mutate(label_E = ifelse(label_E == 0, 1, ifelse(label_E == 16, 0, 1/2^label_E)),
         label_P = ifelse(label_P == 0, 1, ifelse(label_P == 16, 0, 1/2^label_P)))

```


## Well concentration

A 384-well PCR plate was divided into two parts. 1) the dilution of single species DNA template of *E. coli* ([@fig-well-conc-single-and-matrix]a) and *P. putida* ([@fig-well-conc-single-and-matrix]b), 2) the gradient matrix of two-species DNA mixtures ([@fig-well-conc-single-and-matrix]c).

```{r}
#| label: fig-well-conc-single-and-matrix
#| fig-cap: Settings of a 384-well PCR plate.
#| fig-width: 8
p_concentration = lapply(seq_along(strain_label), function(i){
  plate2  |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    plot_384_single_concentration(strain_label[[i]], well_size = 1.5) + 
    scale_color_gradient(high = strain_color[[i]], 
                         low = "white",
                         trans = "log2",
                         na.value = "grey90") +
    coord_equal() +
    theme(legend.position = 'none')
})

plate3 = plate2 |> 
  dplyr::filter(well_position %in% gradient_matrix_well)
p_matrix = plot_384_community_structure(plate3) + 
  scale_fill_manual(values = c("red3","purple3")) +
  coord_equal() +
  theme(legend.position = 'none')

plot_grid(p_concentration[[1]], p_concentration[[2]], p_matrix, 
          ncol = 2, labels = 'auto')
```

## Amplification plot

```{r}
# plot amplification curve
qs_amplification = get_quantstudio_amplication(quantstudio_raw)
```

```{r}
#| label: fig-amplification-curve-of-single-species
#| fig-cap: Amplification curves of singe species DNAs
p_amp = lapply(seq_along(strain_label), function(i){
  df = qs_amplification  |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    left_join(plate2)
  
  ggplot(df, aes(cycle, delta_rn, group = well_position)) +
    geom_line(aes(color = .data[[strain_label[[i]]]])) +
    geom_hline(yintercept = 0.124, linetype = 'dashed', color = 'grey') +
    geom_text(x = -Inf, y = 0.124, label = 'Ct threshold', 
              hjust = -.25, vjust = -0.5, color = 'grey') +
    scale_color_gradient(
      high = strain_color[[i]], low = "white", trans = 'log2', 
      labels = trans_format("log2", label_number_auto()), 
      breaks = 2^c(0, -5, -10, -15)
    ) +
    labs(color = expression(log[2]*Q), y = 'fluorescence') +
    theme(legend.position = "inside",
          legend.position.inside = c(0.38,0.62))
})
plot_grid(plotlist = p_amp, labels = "auto")
```

## Ct model of single species

```{r}
# check ct calling results
qs_results = get_quantstudio_result(quantstudio_raw) |> 
  dplyr::select(well_position, ct) |> 
  dplyr::mutate(ct = as.numeric(ct)) |> 
  left_join(plate2) |> 
  pivot_longer(cols = starts_with("label_"), 
               names_to = "strain", 
               values_to = "quantity")  |> 
  dplyr::filter(quantity != 0, !is.na(ct))

mono_ct = qs_results  |> 
  dplyr::filter(well_position %in% unlist(strain_single_well))
mono_ct
```

```{r}
#| label: fig-correlation-ct-and-log2Q
#| fig-cap: Correlation of Ct values and log2-transformed DNA quantities
p_ct = lapply(seq_along(strain_label), function(i){
  qs_results |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    ggplot(aes(ct, log2(quantity))) +
    geom_smooth(method = 'lm', color = strain_color[[i]]) +
    geom_point(shape = 21, color = strain_color[[i]]) +
    labs(y = expression(log[2]*Q), x = 'Ct')
})

plot_grid(plotlist = p_ct, labels = "auto")
```

## Melting curve gradient

```{r}
mc = quantstudio2mc(quantstudio_raw, plate = plate2, primer = "V4")
mc = filterData(mc, from = 80, to = 90) |> 
  transformData(step = 0.1)
```


```{r}
#| label: fig-melting-curve-of-single-species
#| fig-cap: Melting curves of single species DNAs
plot_mc_single = function(mc, label_color, vline_color){
  # get tm value (median)
  tm = mc_get_tm(mc, npeaks = 1) |> pull(peak_position) |> median()
  
  df = mc2tbl(mc) |> 
    select(-date, -primer) |> 
    summarize(derivative = median(derivative), 
              .by = c("temperature", label_color, "temperature"))
  
  # plot mc
  ggplot(df, 
         aes(temperature, derivative, 
             color = .data[[label_color]], 
             group = .data[[label_color]])) + 
    geom_line() + 
    geom_vline(aes(xintercept = I(tm)), 
               linetype = 'dashed', 
               color = vline_color) +
    geom_text(x = tm, y = Inf, hjust = -0.1, vjust = 2, 
              label = paste0("Tm = ", tm, "°C"), 
              color = vline_color)  +
    scale_x_continuous(breaks = c(80, 85, 90)) +
    labs(x = "temperature (°C)", 
         y = "fluorescence", 
         color = expression(log[2]*Q)) +
    theme(legend.position = "inside",
          legend.position.inside = c(0.75,0.5))
}

p_mc = lapply(seq_along(strain_label), function(i){
  filterData(mc, well_position = strain_single_well[[i]]) |> 
    plot_mc_single(strain_label[[i]], strain_color[[i]]) +
    scale_color_gradient(
      high = strain_color[[i]], 
      low = "white", 
      trans = 'log2', 
      labels = trans_format("log2", label_number_auto()), 
      breaks = 2^c(0, -5, -10, -15)
    ) 
})

plot_grid(plotlist = p_mc, ncol = 2, labels = "auto")
```



## Peak calling

Detect peak and get peak features.

```{r}
mono_mc = lapply(seq_along(strain_label), function(i){
  x = filterData(mc, well_position = strain_single_well[[i]]) |> 
    transformData(step = 0.1)
  df = mc2tbl(x) |> 
    select(-date, -primer) |> 
    nest(data = c(temperature, derivative)) |> 
    pivot_longer(cols = starts_with("label_"), 
                 names_to = "strain", 
                 values_to = "quantity") 
  peaks = lapply(df$data, 
                 mcmodel:::detect_tm, 
                 zero = "+", 
                 npeaks = 1, 
                 sortstr = TRUE, 
                 threshold = 0) |> 
    bind_rows()
  bind_cols(df, peaks)
}) |> 
  bind_rows() |> 
  dplyr::filter(quantity != 0)

mono_mc$peak_area = sapply(1:nrow(mono_mc), function(i){
  d = mono_mc$data[[i]] |> 
    filter(temperature >= mono_mc$peak_start[[i]], 
           temperature <= mono_mc$peak_end[[i]])
  pracma::trapz(d$temperature, d$derivative)
})

peak_cols = paste('peak', 
                  c('height','area','start','position','end'), 
                  sep = "_")
mono_mc = mono_mc |> 
  dplyr::select(well_position, strain, quantity, matches(peak_cols))

mono_mc
```

Correlations of DNA quantity to peak features.

```{r}
#| label: fig-correlation-of-log2Q-and-peak-features
#| fig-cap: Correlations of DNA quantity and peak-associated features extracted from single species melting curves. 
plots = lapply(peak_cols, function(x){
  ggplot(mono_mc, aes(log2(quantity), .data[[x]], color = .data$strain)) + 
    geom_point(size = 0.2) +
    geom_smooth(method = MASS::rlm) +
    labs(x = expression(log[2]*Q), 
         y = sub(pattern = "_", replacement = " ", x)) +
    scale_color_manual(values = strain_color) +
    theme(legend.position = "none")
})

plot_grid(plotlist = plots, align = 'hv', ncol = 3, labels = "auto")
```

```{r}
#| label: fig-mc-corrplot
#| fig-cap: "Correlations of DNA quantity and peak-associated features extracted from single species melting curves."
#| fig-subcap: 
#|   - "*E. coli*"
#|   - "*P. putida*"
#| layout-ncol: 2

library(corrplot)
mono_mc_vars = mono_mc |> 
  dplyr::mutate(log2Q = log2(quantity)) |> 
  dplyr::select(well_position, log2Q, matches(peak_cols)) |> 
  dplyr::rename(`$log[2]*Q` = log2Q) |> 
  dplyr::rename_with(.fn = function(x) sub("_", " ", x), 
                     .cols = matches(peak_cols))

cols = c('Reds','Purples')
p_mc_corrplot = lapply(seq_along(strain_label), function(i){
  vars = mono_mc_vars  |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    dplyr::select(-well_position)
  M = cor(vars)
  T = cor.mtest(vars, conf.level = 0.95)
  corrplot::corrplot(M, 
                     diag = FALSE, addCoef.col = 'grey80',
                     col = COL1(cols[[i]]),
                     tl.srt = 30,
                     tl.col = strain_color[[i]],
                     p.mat = T$p)
})

```

```{r}
#| label: fig-correlation-of-log2Q-and-peak-height
#| fig-cap: Correlation of log2-transformed DNA quantities and peak heights
p_peak_height = lapply(seq_along(strain_label), function(i){
  mono_mc |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    ggplot(aes(peak_height, log2(quantity))) +
    geom_smooth(method = 'lm', color = strain_color[[i]]) +
    geom_point(shape = 21, color = strain_color[[i]]) +
    labs(x = 'peak height',
         y = expression(log[2]*Q))
})

plot_grid(plotlist = p_peak_height, ncol = 2, labels = "auto")
```

```{r}
#| label: fig-correlation-of-log2Q-and-peak-area
#| fig-cap: Correlation of log2-transformed DNA quantities and peak areas
p_peak_area = lapply(seq_along(strain_label), function(i){
  mono_mc |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    ggplot(aes(peak_area, log2(quantity))) +
    geom_smooth(method = 'lm', color = strain_color[[i]]) +
    geom_point(shape = 21, color = strain_color[[i]]) +
    labs(x = 'peak area', y = expression(log[2]*Q))
})

plot_grid(plotlist = p_peak_area, ncol = 2, labels = "auto")
```

## Comparision of Ct and MC modelling

```{r}
qs_single_results = qs_results |> 
  dplyr::filter(well_position %in% unlist(strain_single_well))
qs_single_results
```


```{r}
model_metric = function(formula, data, ...){
  model = lm(formula, data)
  summary = summary(model)
  quosures = enquos(...)
  tibble(data = deparse(substitute(data)), 
         formula = paste(as.character(formula), collapse = " "), 
         metric = c("r_squared", "adj_r_squared"),
         value = c(summary$r.squared, summary$adj.r.squared)) |> 
    dplyr::mutate(!!!quosures, .before = 1)
}
```


```{r}
#| label: fig-comparison-of-ct-and-mc-modelling
#| fig-cap: Comparison of Ct and Mc linear modelling
#| fig-asp: 1
#| fig-width: 6

plot_model_metric = function(model, test_data, color){
  predictions = augment(model, newdata = test_data)
  metrics = metric_set(rmse, rsq, mae)
  model_metrics = metrics(predictions, 
                          truth = 'log2quantity', 
                          estimate = .fitted)
  annotation = paste(model_metrics[['.metric']], 
                     round(model_metrics[['.estimate']], digits = 2), 
                     sep = ": ", 
                     collapse = "\n")
  ggplot(predictions, aes(`log2quantity`, `.fitted`, color = I(color))) +
    geom_point(shape = 21) +
    geom_abline(slope = 1, linetype = 'dashed', color = color) +
    annotate("text", x = -Inf, y = Inf, label = annotation, 
             color = I(color),
             hjust = -0.1, vjust = 1.1) +
    coord_equal() +
    xlim(c(-16,0)) + ylim(c(-16, 0)) +
    labs(x = expression(log[2]*Q[true]), y = expression(log[2]*Q[pred]))
}

p_model_ct = lapply(seq_along(strain_label), function(i){
  data = mono_ct |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    mutate(log2quantity = log2(quantity))
  data_split_single = initial_split(data)
  data_train_single = training(data_split_single)
  data_test_single = testing(data_split_single)
  model = lm(log2quantity ~ ct, data_train_single)
  p = plot_model_metric(model, data_test_single, 
                        strain_color[[i]]) + labs(subtitle = 'Ct model')
  return(p)
})

p_model_mc = lapply(seq_along(strain_label), function(i){
  data = mono_mc |> 
    dplyr::filter(well_position %in% strain_single_well[[i]]) |> 
    mutate(log2quantity = log2(quantity))
  data_split_single = initial_split(data)
  data_train_single = training(data_split_single)
  data_test_single = testing(data_split_single)
  model = lm(log2quantity ~ peak_area + peak_height + peak_start + peak_end, 
             data_train_single)
  plot_model_metric(model, data_test_single, strain_color[[i]]) + 
    labs(subtitle = 'MC model')
})



plot_grid(plotlist = c(p_model_ct, p_model_mc), align = 'hv', labels = "auto")
```

## Combined results for single species



```{r}
#| label: fig-linear-modelling-of-single-species
#| fig-width: 10
#| fig-cap: Linear modelling and prediction of single species abundance with threshold cycle (Ct) and melting curve features in a two-species SynComs (red, *E. coli*. purple, *P. putida*. Same below). 
plot_grid(plotlist = c(p_amp, p_mc, p_model_ct, p_model_mc), 
          align = 'hv', 
          ncol = 4, nrow = 2, labels = 'auto')

ggsave("figures/figure1.jpg")
```
